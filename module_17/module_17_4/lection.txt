Миграции. Библиотека alembic.

1. Устанавливаем через терминал: pip install alembic

2. Просим создать в папку файлы для миграции в терминале: alembic init app/migration
здесь app/migration - и есть та папка в которой будет все установенно

3. интересны файл env.py и файл шаблона script.py.mako - их нужно будет редактировать

4. В корневой директории проекта автоматически создаётся файл alembic.ini
в нем указать адрес в строке адреса:
sqlalchemy.url = sqlite:///ecommerce.db ,  ДЗ: sqlalchemy.url = sqlite:///taskmanager.db
где ecommerce.db - указан в /backend/db_lection.py  ДЗ: DATABASE_URL = "sqlite:///taskmanager.db"

5. редактируем файл env.py:
находим строку target_metadata =
и дополняем записями:
# ДОПОЛНЯЕМ СВОИ ДАННЫЕ К ПРОЕКТУ
from app.backend.db_lection import Base  # db_lection import Base из /backend/db_lection.py и так далее
from app.models.category_lection import Category
from app.models.products_lection import Product
target_metadata = Base.metadata  # указываем целевую БД

6. Проводим самую первую миграцию в терминале командой revision:
alembic revision --autogenerate -m "Initial migration"
- происходит миграция и создаются папка versions и некоторый блок, который описывает нашу БД и все изменения
которые произведены в ней. Т.е. после каждого изменения БД нужно производить миграцию БД

7. Выполните команду alembic upgrade head, которая позволит вам применить последнюю миграцию и создать таблицы User,
  Task и запись текущей версии миграции: alembic upgrade head


Задача "Маршрутизация пользователя":

одготовьтесь и импортируйте все необходимые классы и функции (ваши пути могут отличаться):
from fastapi import APIRouter, Depends, status, HTTPException
# Сессия БД
from sqlalchemy.orm import Session
# Функция подключения к БД
from backend.db_depends import get_db
# Аннотации, Модели БД и Pydantic.
from typing import Annotated
from models import User
from schemas import CreateUser, UpdateUser
# Функции работы с записями.
from sqlalchemy import insert, select, update, delete
# Функция создания slug-строки
from slugify import slugify

Напишите логику работы функций маршрутов:
Каждая из нижеперечисленных функций подключается к базе данных в момент обращения при помощи функции get_db - Annotated[Session, Depends(get_db)]
Функция all_users ('/'):
Должна возвращать список всех пользователей из БД. Используйте scalars, select и all
Функция user_by_id ('/user_id'):
Для извлечения записи используйте ранее импортированную функцию select.
Дополнительно принимает user_id.
Выбирает одного пользователя из БД.
Если пользователь не None, то возвращает его.
В противном случае выбрасывает исключение с кодом 404 и описанием "User was not found"
Функция craete_user ('/create'):
Для добавления используйте ранее импортированную функцию insert.
Дополнительно принимает модель CreateUser.
Подставляет в таблицу User запись значениями указанными в CreateUser.
В конце возвращает словарь {'status_code': status.HTTP_201_CREATED, 'transaction': 'Successful'}
Обработку исключения существующего пользователя по user_id или username можете сделать по желанию.
Функция update_user ('/update'):
Для обновления используйте ранее импортированную функцию update.
Дополнительно принимает модель UpdateUser и user_id.
Если находит пользователя с user_id, то заменяет эту запись значениям из модели UpdateUser. Далее возвращает словарь {'status_code': status.HTTP_200_OK, 'transaction': 'User update is successful!'}
В противном случае выбрасывает исключение с кодом 404 и описанием "User was not found"
Функция delete_user ('/delete'):
Для удаления используйте ранее импортированную функцию delete.
Всё должно работать аналогично функции update_user, только объект удаляется.
Исключение выбрасывать то же.
Создайте, измените и удалите записи через интерфейс Swagger:
Создайте 3 записи User с соответствующими параметрами:
username: user1, user2, user3
firstname: Pasha, Roza, Alex
lastname: Technique, Syabitova, Unknown
age: 40, 62, 25
Измените запись с id=3: firstname = Bear, lastname = Grylls, age = 50
Удалите запись с id =2.
Выведите всех пользователей.
Проверьте, выбрасываются ли исключения в ваших запросах.

Для запуска как обычно в консаоли терминала пишем команду:
python -m uvicorn app.main:app (см app/routers/main.py)